{"version":3,"file":"index-html-transform.factory.js","sourceRoot":"","sources":["../../../../libs/builder-webpack/styles-slots/index-html-transform.factory.ts"],"names":[],"mappings":";;;AAGA,iEAA4D;AAC5D,+BAA+C;AAC/C,8CAAqC;AACrC,mDAAkD;AAElD,SAAgB,yBAAyB,CACvC,OAAiC,EACjC,OAAuB;IAEvB,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAC5C,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;IAC1C,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;IAC9C,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,IAAY,EAAE,EAAE,CACrD,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,cAAc,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;IAEjE,MAAM,sBAAsB,GAAyC,YAAK,CACxE,GAAG,EAAE,CACH,WAAI,CACF,OAAO,CAAC,gBAAgB,CAAC,aAAa,CAEpC,CACH,CACJ,CAAC,IAAI,CACJ,eAAG,CACD,CAAC,EAAE,UAAU,EAAE,EAA4B,EAAE;QAC3C,OAAO,CAAC,GAAG,CACT,aAAa,EACb,cAAc,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CACnD,CAAC;QACF,OAAO,gCACF,OAAO,KACV,WAAW,EAAE,cAAc,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,GACpC,CAAC;IAChC,CAAC,CACF,CACF,CAAC;IACF,OAAO,CAAC,SAAiB,EAAE,EAAE;QAC3B,OAAO,yCAAkB,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC;IAC/D,CAAC,CAAC;AACJ,CAAC;AAnCD,8DAmCC;AAED,SAAS,cAAc,CACrB,UAAkB,EAClB,SAAmB,EACnB,WAAiE;IAEjE,OAAO,eAAO,CAAC,UAAU,CAAC;SACvB,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC7C,MAAM,CAAC,CAAC,KAAiB,EAAE,IAAY,EAAc,EAAE;QACtD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC;QACtC,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,EAAgB,CAAC,CAAC;AACzB,CAAC","sourcesContent":["import { BuilderContext } from '@angular-devkit/architect';\r\nimport { IndexHtmlTransform } from '@angular-devkit/build-angular/src/utils/index-file/index-html-generator';\r\nimport { IndexHtmlTransformOption, StyleSlots } from './model';\r\nimport { indexHtmlTransform } from './index-html-transform';\r\nimport { defer, from, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { readDir } from '../custom-builder/utils';\r\n\r\nexport function indexHtmlTransformFactory(\r\n  options: IndexHtmlTransformOption,\r\n  context: BuilderContext\r\n): IndexHtmlTransform {\r\n  const { stylesSlots, extractCss } = options;\r\n  const { target: targetOptions } = context;\r\n  const usedSlots = Object.keys(stylesSlots);\r\n  console.log('extractCss', options.extractCss);\r\n  const filterFiles = (file: string) => (slot: string) =>\r\n    file.match(`(${slot}?[^\\\\s]+\\\\.${extractCss ? 'css' : 'js'})`);\r\n\r\n  const enrichedTargetOptions$: Observable<IndexHtmlTransformOption> = defer(\r\n    () =>\r\n      from(\r\n        context.getTargetOptions(targetOptions) as Promise<{\r\n          outputPath: string;\r\n        }>\r\n      )\r\n  ).pipe(\r\n    map(\r\n      ({ outputPath }): IndexHtmlTransformOption => {\r\n        console.log(\r\n          'new slots: ',\r\n          getStylesSlots(outputPath, usedSlots, filterFiles)\r\n        );\r\n        return {\r\n          ...options,\r\n          stylesSlots: getStylesSlots(outputPath, usedSlots, filterFiles),\r\n        } as IndexHtmlTransformOption;\r\n      }\r\n    )\r\n  );\r\n  return (indexHtml: string) => {\r\n    return indexHtmlTransform(enrichedTargetOptions$, indexHtml);\r\n  };\r\n}\r\n\r\nfunction getStylesSlots(\r\n  outputPath: string,\r\n  usedSlots: string[],\r\n  filterFiles: (file: string) => (slot: string) => RegExpMatchArray\r\n) {\r\n  return readDir(outputPath)\r\n    .filter((file) => usedSlots.some(filterFiles))\r\n    .reduce((slots: StyleSlots, file: string): StyleSlots => {\r\n      slots[file.split('.').shift()] = file;\r\n      return slots;\r\n    }, {} as StyleSlots);\r\n}\r\n"]}