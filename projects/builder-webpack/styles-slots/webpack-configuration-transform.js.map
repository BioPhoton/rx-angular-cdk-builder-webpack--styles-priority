{"version":3,"file":"webpack-configuration-transform.js","sourceRoot":"","sources":["../../../../libs/builder-webpack/styles-slots/webpack-configuration-transform.ts"],"names":[],"mappings":";;;AAIA,qFAGiE;AAIjE,SAAgB,6BAA6B,CAC3C,WAAuB;IAEvB,OAAO,CAAC,aAA4B,EAA0B,EAAE;QAC9D,MAAM,EAAE,KAAK,EAAE,GAAG,aAAoC,CAAC;QACvD,aAAa,CAAC,KAAK,mCAAQ,KAAK,GAAK,WAAW,CAAE,CAAC;QACnD,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;QAChD,OAAO,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC,CAAC;AACJ,CAAC;AATD,sEASC;AAGD;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,WAAuB;IACzD,mDAAmD;IACnD,MAAM,gBAAgB,GAAG,CACvB,gBAAmC,EACnC,iBAAyB,EACf,EAAE;QACZ,MAAM,eAAe,GAAa,mCAAyB,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;aAC7F,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC;aAC7B,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAElC,oBAAoB;QACpB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC;IAEF,MAAM,EAAC,QAAQ,EAAE,UAAU,EAAC,OAAO,EAAE,QAAQ,EAAC,GAAG,WAAW,CAAC;IAC7D,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACtF,gBAAgB,CAAC,OAAO,EAAE,6DAA6D,CAAC,CAAA;IAGxF,MAAM,WAAW,GAAe;QAC9B,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;QAChE,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1E,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9D,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KACnE,CAAC;IAEF,OAAO,WAAW,CAAC;AACrB,CAAC;AA3BD,kDA2BC;AAGD;;GAEG;AACH,SAAS,gBAAgB,CAAC,IAAc,EAAE,KAAa;IAErD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAElG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,MAAM,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC5D;AAEH,CAAC","sourcesContent":["import { BuilderContext } from '@angular-devkit/architect';\r\nimport { StyleSlots } from './model';\r\nimport { ExecutionTransformer, ExtraEntryPoint } from '@angular-devkit/build-angular';\r\nimport { Configuration } from 'webpack';\r\nimport {\r\n  NormalizedEntryPoint,\r\n  normalizeExtraEntryPoints\r\n} from '@angular-devkit/build-angular/src/webpack/utils/helpers';\r\nimport { JsonObject } from '@angular-devkit/core';\r\nimport { ExtraEntryPointClass } from '@angular-devkit/build-angular/src/browser/schema';\r\n\r\nexport function webpackConfigurationTransform(\r\n  stylesSlots: StyleSlots\r\n): ExecutionTransformer<Configuration> {\r\n  return (webpackConfig: Configuration): Promise<Configuration> => {\r\n    const { entry } = webpackConfig as {entry: JsonObject};\r\n    webpackConfig.entry = { ...entry, ...stylesSlots };\r\n    console.log('new entry: ', webpackConfig.entry);\r\n    return Promise.resolve(webpackConfig);\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * @TODO turn string[] of urls into Angular ExtraEntryPointClass and return them to later add them to wpc.entry\r\n * @TODO ensure no file is included twice\r\n *\r\n * @param stylesSlots\r\n */\r\nexport function generateEntryPoints(stylesSlots: StyleSlots): StyleSlots {\r\n  // Add all styles/scripts, except lazy-loaded ones.\r\n  const extraEntryPoints = (\r\n    extraEntryPoints: ExtraEntryPoint[],\r\n    defaultBundleName: string,\r\n  ): string[] => {\r\n    const entryPointNames: string[] = normalizeExtraEntryPoints(extraEntryPoints, defaultBundleName)\r\n      .filter(entry => entry.inject)\r\n      .map(entry => entry.bundleName);\r\n\r\n    // remove duplicates\r\n    return Array.from(new Set(entryPointNames));\r\n  };\r\n\r\n  const {critical, stylesheet,preload, prefetch} = stylesSlots;\r\n  const allUrls = Object.values(stylesSlots).reduce((acc, arr) => [...acc, ...arr], []);\r\n  ensureUniqueness(allUrls, 'Multiple style urls are the same across the different slots')\r\n\r\n\r\n  const entryPoints: StyleSlots = {\r\n    critical: critical ? extraEntryPoints(critical, 'critical') : [],\r\n    stylesheet: (stylesheet ? extraEntryPoints(stylesheet, 'stylesheet') : []),\r\n    preload: (preload ? extraEntryPoints(preload, 'preload') : []),\r\n    prefetch: (prefetch ? extraEntryPoints(prefetch, 'prefetch') : []),\r\n  };\r\n\r\n  return entryPoints;\r\n}\r\n\r\n\r\n/**\r\n *\r\n */\r\nfunction ensureUniqueness(urls: string[], error: string) {\r\n\r\n  const duplicates = Array.from(new Set(urls.filter(x => urls.indexOf(x) !== urls.lastIndexOf(x))));\r\n\r\n  if (duplicates.length > 0) {\r\n    throw new Error(`${error}: '${duplicates.join(`', '`)}'.`);\r\n  }\r\n\r\n}\r\n"]}